import Main from "../../../main-layouts/main";
import { useEffect, useState } from "react";
import { useForm } from "react-hook-form";
import Swal from "sweetalert2";
import axios from "axios";
import Select from 'react-select';
import { FaMinus, FaPlus } from "react-icons/fa";
import DataTable from "../../../components/Datatables";
import { ColumnDef } from "@tanstack/react-table";
import { ArchiveBoxIcon } from "@heroicons/react/24/solid";

// TypeScript Interface for Form Data
interface RFQFormData {
  rfqTitle: string;
  category: string;
  rfqFrom: string;
  prFilter: string;
  rfqSpecification: string;
  rfqDueDate: string;
  rfqType: string;
  rfqPicture?: FileList;
  rfqAttachment?: FileList;
  vendor?: string;
}

// Definisi tipe Material
interface Material {
  material_number: string;
  material_description: string;
  material_group: string;
  material_group_description: string;
  base_unit: string;
}

export default function RFQSubmission() {
  const { register, handleSubmit, formState: { errors }, reset } = useForm<RFQFormData>();
  const [loading, setLoading] = useState(false);
  const [submitLabel, setSubmitLabel] = useState("Submit");
  const [category, setCategory] = useState<string | null>(null);
  const [rfqFrom, setRfqFrom] = useState<string | null>(null);
  const [prSapData, setPrSapData] = useState<any[]>([]);
  const [materials, setMaterials] = useState<Material[]>([]);
  const [selectedMaterial, setSelectedMaterial] = useState<Material | null>(null);
  const [selectedMaterials, setSelectedMaterials] = useState<Material[]>([]);
  const [isRefresh, setIsRefresh] = useState<number>(0);
  const [materialSelections, setMaterialSelections] = useState([{ selectedMaterial: null }]);
  const [prSapFilter, setPrSapFilter] = useState<string>('part_number');
  const [filterValue, setFilterValue] = useState<string>('');
  const [selectedItem, setSelectedItem] = useState<any | null>(null);
  const [vendors, setVendors] = useState<any[]>([]); // State to store vendor data
  const [selectedVendor, setSelectedVendor] = useState<any | null>(null);
  const [rfqType, setRfqType] = useState<string>("general"); // Default to "general"
  const [selectedVendorsList, setSelectedVendorsList] = useState<any[]>([]); 
  const [vendorSelections, setVendorSelections] = useState<any[]>([{ selectedVendor: null }]); // Vendor selections state

  const addMaterialRow = () => {
    setMaterialSelections((prev) => [...prev, { selectedMaterial: null }]);
  };

  const removeMaterialRow = (index: number) => {
    setMaterialSelections((prev) => {
      const updated = [...prev];
      updated.splice(index, 1);
      return updated;
    });
  };

  // Handle vendor selection for a particular row
  const handleVendorChange = (selectedOption: any, index: number) => {
    const updatedVendorSelections = [...vendorSelections];
    const selectedVendorData = vendors.find((vendor) => vendor.value === selectedOption.value);
    updatedVendorSelections[index].selectedVendor = selectedVendorData || null;
    setVendorSelections(updatedVendorSelections); // Ensure state is updated
  };

  // Add vendor row to the list
  const addVendorRow = () => {
    setVendorSelections((prev) => [...prev, { selectedVendor: null }]); // Add a new vendor selection row
  };

  // Remove vendor row from the list
  const removeVendorRow = (index: number) => {
    setVendorSelections((prev) => {
      const updated = [...prev];
      updated.splice(index, 1); // Remove the row at the specified index
      return updated;
    });
  };

  const materialOptions = materials.map((mat) => ({
    value: mat.material_number,
    label: `${mat.material_number} - ${mat.material_description}`,
    fullData: mat, // simpan seluruh objek material untuk keperluan setSelectedMaterial
  }));

  const filteredPrSapData = prSapData.filter(item => {
    switch (prSapFilter) {
      case "part_number":
        return item.part_number.includes(filterValue);
      case "pr_number":
        return item.pr_number.includes(filterValue);
      default:
        return true;
    }
  });

  useEffect(() => {
    if (!category) return;
    setMaterials([]); // Reset data material sebelumnya
    setSelectedMaterial(null);

    const fetchData = async () => {
      try {
        const endpoint = category === "vendor"
          ? "http://localhost:3000/api/materials"
          : "http://localhost:3000/api/subcontractor";
    
        const response = await axios.get(endpoint);
        console.log("Fetched Data:", response.data); // Log data untuk memastikan
    
        // Pastikan data yang diterima ada di dalam response.data.data.data dan data tersebut merupakan array
        if (response.data && Array.isArray(response.data.data.data)) {
          if (category === "vendor") {
            setMaterials(response.data.data.data);  // Ambil data material untuk vendor
          } else {
            setPrSapData(response.data.data.data);  // Ambil data subcontractor untuk PR SAP
          }
        } else {
          console.error("Fetched data is not in the expected format:", response.data);
        }
      } catch (error) {
        console.error("Error fetching data:", error);
      }
    };
    fetchData();
  }, [category]);

   
   // Fetch vendor data from API
  useEffect(() => {
    const fetchVendors = async () => {
      try {
        const response = await axios.get("http://localhost:3000/api/vendors"); // Fetch vendor data
        const vendorData = response.data.data.data.map((vendor: any) => ({
          value: vendor.id, // Assuming each vendor has an 'id' field
          label: `${vendor.name}`, // Display name and vendorCode as label
          name: vendor.name,
          vendorCode: vendor.vendorCode,
          vendorCodeNew: vendor.vendorCode_new, // Add new vendor code
        }));
        setVendors(vendorData); // Set vendors data
      } catch (error) {
        console.error("Error fetching vendor data", error);
      }
    };

    fetchVendors();
  }, []);



 

  const onSubmit = async (data: RFQFormData) => {
    setLoading(true);
    setSubmitLabel("Submitting...");

    try {
      const formData = new FormData();
      formData.append("rfqTitle", data.rfqTitle);
      formData.append("category", data.category);
      formData.append("rfqFrom", data.rfqFrom);
      formData.append("prFilter", data.prFilter);
      formData.append("rfqSpecification", data.rfqSpecification);
      formData.append("rfqDueDate", data.rfqDueDate);
      formData.append("rfqType", data.rfqType);
      if (data.rfqPicture && data.rfqPicture.length > 0) {
        formData.append("rfqPicture", data.rfqPicture[0]); 
      }
      if (data.rfqAttachment && data.rfqAttachment.length > 0) {
        formData.append("rfqAttachment", data.rfqAttachment[0]);
      }
      if (data.vendor) {
        formData.append("vendor", data.vendor);
      }

      const response = await axios.post("http://localhost:3000/api/rfq", formData, {
        headers: { "Content-Type": "multipart/form-data" },
      });

      Swal.fire({
        icon: "success",
        title: "Success",
        text: "RFQ submitted successfully!",
      });

      reset(); 
    } catch (error) {
      console.error("Error submitting RFQ:", error);
      Swal.fire({
        icon: "error",
        title: "Oops...",
        text: "Something went wrong while submitting the RFQ!",
      });
    } finally {
      setLoading(false);
      setSubmitLabel("Submit");
    }
  };

  type IRfq = {
    rfqTitle: string;
    rfqCategory: 'vendor' | 'subcontractor';
    rfqFrom: 'forecast' | 'pr_sap';
    material?: {
      part_number: string;
      material_group: string;
      base_unit: string;
    };
    prSapItems?: {
      pr_number: string;
      part_number: string;
      description: string;
      total_qty: number;
      uom: string;
    }[];
    rfqPicture?: FileList;
    rfqAttachment?: FileList;
    rfqSpecification?: string;
    rfqDueDate: string;
    rfqType: 'general' | 'invitation';
  };

  const columns: ColumnDef<IRfq>[] = [
    {
      accessorKey: "rfqTitle",
      header: "RFQ Title",
      enableSorting: true,
    },
    {
      accessorKey: "rfqCategory",
      header: "Category",
      enableSorting: true,
    },
    {
      accessorKey: "rfqFrom",
      header: "From",
      enableSorting: true,
    },
    {
      accessorKey: "rfqDueDate",
      header: "Due Date",
      enableSorting: true,
    },
    {
      accessorKey: "rfqType",
      header: "Type",
      enableSorting: true,
    },
    {
      accessorKey: "actions",
      header: "Action",
      cell: ({ row }) => {
        const data = row.original;
        function handleArchive(data: IRfq) {
          throw new Error("Function not implemented.");
        }

        return (
          <div className="flex justify-center">
            <button
              className="btn btn-xs bg-gray-700 text-white hover:bg-gray-800"
              onClick={() => handleArchive(data)}
            >
              Archive
            </button>
          </div>
        );
      },
    },
  ];

  function resetForm(): void {
    throw new Error("Function not implemented.");
  }

  return (
    <Main>
      <div className="mb-6 w-full">
        <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4 mt-4">
          <h1 className="text-2xl sm:text-3xl font-bold text-gray-800">RFQ Submission</h1>
          <button
            className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg flex items-center gap-2"
            data-modal-toggle="#modal_trxRfq"
          >
            <i className="ki-outline ki-plus-squared"></i>
            <span>Add Data</span>
          </button>
        </div>
      </div>

      <div className="w-full">
        <DataTable
          columns={columns}
          url={`${process.env.NEXT_PUBLIC_API_URL}/api/rfq`}
          isRefetch={isRefresh}
        />
      </div>

      <div className="modal" data-modal="true" id="modal_trxRfq">
        <div className="modal-content max-w-4xl w-full top-[5%]">
          <div className="modal-header flex items-center justify-between border-b pb-3">
            <h3 className="text-xl font-semibold">RFQ Submission</h3>
            <button
              className="text-gray-600 hover:text-red-500"
              data-modal-dismiss="true"
              onClick={() => resetForm()}
            >
              <i className="ki-outline ki-cross text-lg"></i>
            </button>
          </div>

          <div className="p-6 bg-white shadow rounded-lg">
            <form onSubmit={handleSubmit(onSubmit)} encType="multipart/form-data" className="space-y-6">
              {/* RFQ Title */}
              <div className="mb-6">
                <label className="block text-sm font-medium text-gray-700 mb-1">RFQ Title</label>
                <div className="flex items-center border rounded-lg shadow-sm focus-within:ring-2 focus-within:ring-blue-500 focus-within:border-blue-500 bg-white">
                  <div className="pl-3">
                    <ArchiveBoxIcon className="w-5 h-5 text-gray-400" />
                  </div>
                  <input
                    type="text"
                    placeholder="Enter Title"
                    className="w-full px-3 py-2 focus:outline-none rounded-r-lg"
                    {...register("rfqTitle", { required: "RFQ Title is required." })}
                  />
                </div>
                {errors.rfqTitle && (
                  <p className="text-sm text-red-500 mt-1">{errors.rfqTitle.message}</p>
                )}
              </div>

              {/* Vendor / Subcontractor Selection */}
              <div className="mb-6">
                <div className="text-center mb-4 relative">
                  <h2 className="text-base text-gray-700 inline-block px-2 bg-white z-10 relative">
                    Select Category
                  </h2>
                  <div className="absolute top-1/2 left-0 w-full border-t border-gray-200 z-0" />
                </div>

                <div className="flex justify-center gap-6 mb-6">
                  {["vendor", "subcontractor"].map((type) => (
                    <label key={type} className="inline-flex items-center">
                      <input
                        type="radio"
                        name="rfq_category"
                        value={type}
                        checked={category === type}
                        onChange={() => setCategory(type)}
                        className="hidden peer"
                      />
                      <span
                        className={`px-6 py-2 border rounded cursor-pointer transition ${
                          category === type
                            ? "bg-blue-600 text-white"
                            : "bg-gray-100 text-gray-700 hover:bg-gray-200"
                        }`}
                      >
                        {type}
                      </span>
                    </label>
                  ))}
                </div>

                {category && (
                  <div className="text-center mb-4 relative">
                    <div className="text-sm text-gray-500 inline-block px-2 bg-white z-10 relative">
                      Choose From
                    </div>
                    <div className="absolute top-1/2 left-0 w-full border-t border-gray-200 z-0" />
                  </div>
                )}

                {category && (
                  <div className="flex justify-center gap-8">
                    {[
                      { value: "forecast", label: "Forecast" },
                      { value: "pr_sap", label: "PR SAP" },
                    ].map((item) => (
                      <label
                        key={item.value}
                        className="inline-flex items-center gap-2 text-gray-700 text-sm"
                      >
                        <input
                          type="radio"
                          name="radiofrom"
                          value={item.value}
                          checked={rfqFrom === item.value}
                          onChange={() => setRfqFrom(item.value)}
                          className="form-radio text-blue-600"
                        />
                        {item.label}
                      </label>
                    ))}
                  </div>
                )}
              </div>

              {/* Forecast - Material Selection */}
              {rfqFrom === "forecast" && (
                <div className="border border-gray-300 rounded-lg p-4 space-y-4">
                  <h3 className="text-lg font-semibold text-gray-800">Forecast - Material Selection</h3>
                  <div className="overflow-x-auto">
                    <table className="w-full text-sm text-left border border-gray-200">
                      <thead className="bg-gray-100 text-gray-700">
                        <tr>
                          <th className="p-2 border">Part Number</th>
                          <th className="p-2 border">Material Group</th>
                          <th className="p-2 border">UoM</th>
                          <th className="p-2 border text-center">Actions</th>
                        </tr>
                      </thead>
                      <tbody>
                        {materialSelections.map((entry, index) => (
                          <tr key={index} className="bg-white hover:bg-gray-50">
                            <td className="p-2 border">
                              <Select
                                options={materialOptions}
                                isClearable
                                placeholder="Select Material..."
                                value={entry.selectedMaterial ? materialOptions.find(opt => opt.value === entry.selectedMaterial.material_number) : null}
                                onChange={(selectedOption) => {
                                  const fullMaterial = materials.find(mat => mat.material_number === selectedOption?.value);
                                  setMaterialSelections(prev => {
                                    const updated = [...prev];
                                    updated[index] = { ...updated[index], selectedMaterial: fullMaterial || null };
                                    return updated;
                                  });
                                }}
                                className="w-full"
                              />
                            </td>
                            <td className="p-2 border">{entry.selectedMaterial?.material_group || "-"}</td>
                            <td className="p-2 border">{entry.selectedMaterial?.base_unit || "-"}</td>
                            <td className="p-2 border text-center">
                              <div className="flex gap-2 justify-center">
                                <button
                                  type="button"
                                  onClick={addMaterialRow}
                                  className="bg-blue-600 hover:bg-blue-700 text-white px-3 py-1 rounded flex items-center gap-1"
                                >
                                  <FaPlus />
                                </button>
                                {materialSelections.length > 1 && (
                                  <button
                                    type="button"
                                    onClick={() => removeMaterialRow(index)}
                                    className="bg-red-600 hover:bg-red-700 text-white px-3 py-1 rounded flex items-center gap-1"
                                  >
                                    <FaMinus />
                                  </button>
                                )}
                              </div>
                            </td>
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                </div>
              )}

              {/* PR SAP Filter */}
              {rfqFrom === "pr_sap" && (
                <div className="border border-gray-300 rounded-lg p-4 space-y-4">
                  <h3 className="text-lg font-semibold text-gray-800">PR SAP Filter</h3>
                  <div className="flex justify-between mb-4">
                    <label className="text-sm text-gray-600">Filter by:</label>
                    <select
                      className="w-full border rounded-lg p-2 text-sm text-gray-600"
                      value={prSapFilter}
                      onChange={(e) => setPrSapFilter(e.target.value)}
                    >
                      <option value="part_number">Part Number</option>
                      <option value="pr_number">PR Number</option>
                    </select>
                  </div>
                  <div className="space-y-2 mb-4">
                    <label className="block text-sm font-medium text-gray-700">Filter Value</label>
                    <input
                      type="text"
                      value={filterValue}
                      onChange={(e) => setFilterValue(e.target.value)}
                      className="w-full border rounded-lg p-2 text-sm text-gray-600"
                      placeholder="Enter filter value..."
                    />
                  </div>

                  {/* Select Item Dropdown */}
                  <div className="space-y-2 mb-4">
                    <label className="block text-sm font-medium text-gray-700">Select Item</label>
                    <Select
                      options={filteredPrSapData.map((item) => ({
                        value: item.part_number,
                        label: `${item.part_number} - ${item.description}`,
                        fullData: item,
                      }))}
                      value={selectedItem}
                      onChange={(selectedOption) => setSelectedItem(selectedOption)}
                      placeholder="Select an item..."
                    />
                  </div>
                </div>
              )}

              {/* RFQ Picture Upload */}
              <div className="space-y-2">
                          <label className="block text-sm font-semibold text-gray-700">
                            RFQ Picture <span className="text-xs text-gray-500">(Max 5MB)</span>
                          </label>
                          <div className="flex items-center space-x-4">
                            <input
                              type="file"
                              accept="image/*"
                              className="w-full border rounded-lg p-2 text-sm text-gray-600 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-100 file:text-blue-700 hover:file:bg-blue-200"
                              {...register("rfqPicture")}
                            />
                          </div>
                        </div>

                  {/* RFQ Attachment Upload */}
                  <div className="space-y-2">
                            <label className="block text-sm font-semibold text-gray-700">
                              RFQ Attachment <span className="text-xs text-gray-500">(Max 5MB)</span>
                            </label>
                            <div className="flex items-center space-x-4">
                              <input
                                type="file"
                                className="w-full border rounded-lg p-2 text-sm text-gray-600 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-100 file:text-blue-700 hover:file:bg-blue-200"
                                {...register("rfqAttachment")}
                              />
                            </div>
                          </div>

                        {/* RFQ Specification */}
                        <div className="space-y-2">
                          <label className="block text-sm font-semibold text-gray-700">
                            RFQ Specification
                          </label>
                          <textarea
                            className="w-full border rounded-lg p-3 text-sm text-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500"
                            rows={4}
                            placeholder="Provide detailed specifications..."
                            {...register("rfqSpecification")}
                          />
                        </div>

                        {/* Date & Type */}
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div className="space-y-2">
                          <label className="block text-sm font-semibold text-gray-700">RFQ Due Date</label>
                          <input
                            type="date"
                            className="w-full border rounded-lg p-2 text-sm text-gray-600 focus:outline-none focus:ring-2 focus:ring-blue-500"
                            {...register("rfqDueDate", { required: "Due date is required." })}
                          />
                          {errors.rfqDueDate && (
                            <p className="text-sm text-red-500">{errors.rfqDueDate.message}</p>
                          )}
                        </div>
                        </div>

 {/* RFQ Type (Radio Buttons) */}
 <div className="space-y-2">
                <label className="block text-sm font-semibold text-gray-700">RFQ Type</label>
                <div className="flex items-center gap-4">
                  <label>
                    <input
                      type="radio"
                      value="general"
                      checked={rfqType === "general"}
                      onChange={() => setRfqType("general")}
                      className="form-radio text-blue-600"
                    />
                    <span className="ml-2 text-sm">General</span>
                  </label>
                  <label>
                    <input
                      type="radio"
                      value="invitation"
                      checked={rfqType === "invitation"}
                      onChange={() => setRfqType("invitation")}
                      className="form-radio text-blue-600"
                    />
                    <span className="ml-2 text-sm">Invitation</span>
                  </label>
                </div>
                {errors.rfqType && (
                  <p className="text-sm text-red-500">{errors.rfqType.message}</p>
                )}
              </div>

     {/* Select Vendor (Only show if RFQ Type is "Invitation")
     {rfqType === "invitation" && (
                <div className="space-y-2">
                  <label className="block text-sm font-semibold text-gray-700">Select Vendor</label>
                  <Select
                    options={vendors} // Options for the select dropdown
                    value={selectedVendor} // Selected value
                    onChange={(selectedOption) => setSelectedVendor(selectedOption)} // Handle vendor selection
                    isClearable
                    placeholder="Select Vendor..."
                    className="w-full"
                  />
                </div>
              )} */}

               {/* Vendor Table (only shown if RFQ Type is "Invitation" and a vendor is selected) */}
      {rfqType === "invitation" && (
        <div className="mt-6">
          <h3 className="text-lg font-semibold text-gray-800">Selected Vendor</h3>
          <table className="min-w-full text-sm text-left border border-gray-200 mt-4">
            <thead className="bg-gray-100 text-gray-700">
              <tr>
                <th className="p-2 border">Vendor Name</th>
                <th className="p-2 border">Vendor Code</th>
                <th className="p-2 border">Vendor Code New</th>
                <th className="p-2 border text-center">Actions</th>
              </tr>
            </thead>
            <tbody>
              {vendorSelections.map((entry, index) => (
                <tr key={index} className="bg-white hover:bg-gray-50">
                  <td className="p-2 border">
                    <Select
                      options={vendors}
                      isClearable
                      placeholder="Select Vendor..."
                      value={
                        entry.selectedVendor
                          ? vendors.find((vendor) => vendor.value === entry.selectedVendor.value)
                          : null
                      }
                      onChange={(selectedOption) => handleVendorChange(selectedOption, index)} // Handle vendor selection
                      className="w-full"
                    />
                  </td>
                  <td className="p-2 border">
                    {entry.selectedVendor?.vendorCode || "-"}
                  </td>
                  <td className="p-2 border">
                    {entry.selectedVendor?.vendorCodeNew || "-"}
                  </td>
                  <td className="p-2 border text-center">
                    <div className="flex gap-2 justify-center">
                      {/* Add Vendor Row Button */}
                      <button
                        type="button"
                        onClick={addVendorRow} // Add a new vendor row
                        className="bg-blue-600 hover:bg-blue-700 text-white px-3 py-1 rounded flex items-center gap-1"
                      >
                        <FaPlus />
                      </button>

                      {/* Remove Vendor Row Button */}
                      {vendorSelections.length > 1 && (
                        <button
                          type="button"
                          onClick={() => removeVendorRow(index)} // Remove the current vendor row
                          className="bg-red-600 hover:bg-red-700 text-white px-3 py-1 rounded flex items-center gap-1"
                        >
                          <FaMinus />
                        </button>
                      )}
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}


                      {/* Submit Button */}
                      <div className="mt-6 text-right">
                        <button
                          type="submit"
                          className={`inline-block bg-blue-600 text-white font-medium px-6 py-2 rounded-lg shadow-sm hover:bg-blue-700 transition duration-200 ${loading ? "opacity-50 cursor-not-allowed" : ""}`}
                          disabled={loading}
                        >
                          {submitLabel}
                        </button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </Main>
  );
}
